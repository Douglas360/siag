// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  name       String?
  login      String    @unique
  password   String
  admin      Boolean   @default(false)
  avatar     String?
  id_empresa Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  lastLogin  DateTime?
  cargo      String?
  ativo      Boolean   @default(true)

  log              Log[]
  documentType     DocumentType[]
  officialDocument OfficialDocument[]
  userMapping      UserProfileMapping[]
  userGroupMapping UserGroupMapping[]
  empresa          Empresa              @relation(fields: [id_empresa], references: [id_empresa])
  leitura          Leitura[]

  @@map("t_user")
}

model Empresa {
  id_empresa    Int       @id @default(autoincrement())
  nome          String    @unique
  endereco      String
  cnpj          String    @unique
  email         String    @unique
  telefone      String?
  ativo         Boolean   @default(false)
  dt_criado     DateTime  @default(now())
  dt_atualizado DateTime?

  users            User[]
  log              Log[]
  documentType     DocumentType[]
  officialDocument OfficialDocument[]

  @@map("t_empresa")
}

//Module Administration
model DocumentType {
  id_doc_type     Int       @id @default(autoincrement())
  descricao       String
  number_document String
  type            String
  file            String
  id_empresa      Int?
  id_user         Int?
  dt_criado       DateTime  @default(now())
  dt_atualizado   DateTime?

  empresa Empresa? @relation(fields: [id_empresa], references: [id_empresa], onDelete: NoAction, onUpdate: NoAction)
  user    User?    @relation(fields: [id_user], references: [id])

  @@map("t_modelo_doc")
}

model OfficialDocument {
  id_doc_oficial   Int       @id @default(autoincrement())
  descricao        String
  numero_documento String
  tipo             String
  arquivo          String
  id_empresa       Int?
  id_user          Int?
  dt_criado        DateTime  @default(now())
  dt_atualizado    DateTime?

  user    User?     @relation(fields: [id_user], references: [id])
  empresa Empresa?  @relation(fields: [id_empresa], references: [id_empresa], onDelete: NoAction, onUpdate: NoAction)
  leitura Leitura[]

  @@map("t_documento_oficial")
}

model Leitura {
  id_leitura     Int      @id @default(autoincrement())
  id_doc_oficial Int
  id_user        Int
  dt_leitura     DateTime @default(now())

  user             User             @relation(fields: [id_user], references: [id])
  officialDocument OfficialDocument @relation(fields: [id_doc_oficial], references: [id_doc_oficial], onDelete: NoAction, onUpdate: NoAction)

  @@map("t_leitura")
}

model Log {
  id_log     Int      @id @default(autoincrement())
  id_user    Int?
  id_empresa Int?
  descricao  String
  dt_criado  DateTime @default(now())

  empresa Empresa? @relation(fields: [id_empresa], references: [id_empresa], onDelete: NoAction, onUpdate: NoAction)
  user    User?    @relation(fields: [id_user], references: [id])

  @@map("t_log")
}

model UserProfile {
  id_perfil        Int     @id @default(autoincrement())
  nome_perfil      String
  descricao_perfil String?

  profilePermission ProfilePermission[]
  userMapping       UserProfileMapping[]

  @@map("t_perfil_usuario")
}

model Module {
  id_modulo   Int    @id @default(autoincrement())
  nome_modulo String

  permissao Permission[]

  @@map("t_modulo")
}

model Permission {
  id_permissao   Int    @id @default(autoincrement())
  nome_permissao String
  id_modulo      Int?

  profilePermission ProfilePermission[]
  modulo            Module?             @relation(fields: [id_modulo], references: [id_modulo], onDelete: NoAction, onUpdate: NoAction)

  @@map("t_permissao")
}

model ProfilePermission {
  id_perfil_permissao Int     @id @default(autoincrement())
  id_perfil           Int
  id_permissao        Int
  canEdit             Boolean @default(true) // Indica se o perfil pode editar a permiss√£o

  profile    UserProfile @relation(fields: [id_perfil], references: [id_perfil])
  permission Permission  @relation(fields: [id_permissao], references: [id_permissao])

  @@map("t_perfil_acesso_permissao")
}

model UserProfileMapping {
  id_usuario_perfil Int @id @default(autoincrement())
  id_perfil         Int
  id_usuario        Int

  user    User        @relation(fields: [id_usuario], references: [id])
  profile UserProfile @relation(fields: [id_perfil], references: [id_perfil])

  @@map("t_usuario_perfil")
}

model GroupUser {
  id_grupo         Int                @id @default(autoincrement())
  nome_grupo       String
  descricao_grupo  String?
  userGroupMapping UserGroupMapping[]

  @@map("t_grupo_usuario")
}

model UserGroupMapping {
  id_usuario_grupo Int @id @default(autoincrement())
  id_grupo         Int
  id_usuario       Int

  user  User      @relation(fields: [id_usuario], references: [id])
  group GroupUser @relation(fields: [id_grupo], references: [id_grupo])

  @@map("t_usuario_grupo")
}
